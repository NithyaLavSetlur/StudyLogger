<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>StudyLogger - Statistics</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <style>
        :root {
            --primary: #3498db;
            --secondary: #2c3e50;
            --accent: #16a085;
            --light: #ecf0f1;
            --dark: #2c3e50;
            --text: #333;
            --text-light: #7f8c8d;
            --shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            --transition: all 0.3s ease;
            
            /* Subject colors */
            --maths-color: #e74c3c;
            --english-color: #3498db;
            --physics-color: #9b59b6;
            --software-color: #2ecc71;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background-color: #f9f9f9;
            color: var(--text);
            line-height: 1.6;
        }

        /* Header Styles */
        .header {
            background-color: white;
            box-shadow: var(--shadow);
            padding: 15px 0;
            position: sticky;
            top: 0;
            z-index: 100;
        }

        .header-container {
            display: flex;
            justify-content: space-between;
            align-items: center;
            max-width: 1200px;
            margin: 0 auto;
            padding: 0 20px;
        }

        .logo-container {
            display: flex;
            align-items: center;
        }

        .logo-img {
            height: 40px;
            margin-right: 10px;
        }

        .logo-text {
            color: var(--secondary);
            font-weight: bold;
            font-size: 1.5rem;
            text-decoration: none;
            transition: var(--transition);
        }

        .logo-text:hover {
            color: var(--accent);
        }

        /* Navigation Styles */
        .nav {
            display: flex;
            align-items: center;
        }

        .nav-menu {
            display: flex;
            list-style: none;
        }

        .nav-menu li {
            position: relative;
            margin-left: 20px;
        }

        .nav-menu li a {
            color: var(--text);
            text-decoration: none;
            padding: 10px 15px;
            border-radius: 5px;
            transition: var(--transition);
            display: block;
        }

        .nav-menu li a:hover {
            background-color: var(--light);
            color: var(--accent);
        }

        .dropdown:hover .dropdown-content {
            display: block;
        }

        .dropdown-content {
            display: none;
            position: absolute;
            background-color: white;
            min-width: 200px;
            box-shadow: var(--shadow);
            border-radius: 5px;
            z-index: 1;
            padding: 10px 0;
        }

        .dropdown-content a {
            padding: 10px 20px;
            color: var(--text);
            display: block;
        }

        .dropdown-content a:hover {
            background-color: var(--light);
            color: var(--accent);
        }

        .dropdown-content a i {
            margin-right: 10px;
            width: 20px;
            text-align: center;
        }

        /* Main Content Styles */
        .content {
            max-width: 1200px;
            margin: 30px auto;
            padding: 0 20px;
        }

        h1 {
            color: var(--secondary);
            margin-bottom: 30px;
        }

        /* Stats Sections */
        .stats-section {
            background: white;
            border-radius: 10px;
            padding: 25px;
            margin-bottom: 30px;
            box-shadow: var(--shadow);
        }

        .stats-section h2 {
            color: var(--secondary);
            margin-bottom: 20px;
            padding-bottom: 10px;
            border-bottom: 2px solid var(--light);
        }

        .chart-container {
            position: relative;
            height: 400px;
            margin-bottom: 20px;
        }

        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
            gap: 20px;
            margin-top: 30px;
        }

        .stat-card {
            background: white;
            border-radius: 10px;
            padding: 20px;
            box-shadow: var(--shadow);
        }

        .stat-card h3 {
            color: var(--secondary);
            margin-bottom: 15px;
            font-size: 1.2rem;
        }

        .stat-value {
            font-size: 2rem;
            font-weight: bold;
            color: var(--accent);
        }

        .stat-label {
            color: var(--text-light);
            margin-top: 5px;
        }

        /* Filter Bar */
        .filter-container {
            display: flex;
            flex-wrap: wrap;
            gap: 15px;
            margin-bottom: 30px;
            align-items: center;
        }

        .filter-group {
            display: flex;
            align-items: center;
        }

        .filter-group label {
            margin-right: 8px;
            font-weight: 600;
            white-space: nowrap;
        }

        .filter-group select {
            padding: 8px 15px;
            border-radius: 5px;
            border: 1px solid #ddd;
            background-color: white;
            min-width: 120px;
        }

        .reset-btn {
            padding: 8px 15px;
            background-color: var(--light);
            border: none;
            border-radius: 5px;
            cursor: pointer;
            transition: var(--transition);
        }

        .reset-btn:hover {
            background-color: #ddd;
        }

        /* Responsive Styles */
        @media (max-width: 768px) {
            .header-container {
                flex-direction: column;
                padding: 15px;
            }

            .nav-menu {
                margin-top: 15px;
                flex-direction: column;
                width: 100%;
            }

            .nav-menu li {
                margin: 5px 0;
                width: 100%;
            }

            .dropdown-content {
                position: static;
                box-shadow: none;
                width: 100%;
            }

            .filter-container {
                flex-direction: column;
                align-items: flex-start;
            }

            .chart-container {
                height: 300px;
            }
        }
    </style>
</head>

<body>
    <!-- Header with Logo and Navigation -->
    <header class="header">
        <div class="header-container">
            <div class="logo-container">
                <!-- <img src="/public/static/study.png" alt="StudyLogger Logo" class="logo-img"> -->
                <a href="http://localhost:8000/home" class="logo-text">StudyLogger</a>
            </div>
            
            <nav class="nav">
                <ul class="nav-menu">
                    <li><a href="http://localhost:8000/home">Home</a></li>
                    <li><a href="http://localhost:8000/input">Input Logs</a></li>
                    <li class="dropdown">
                        <a href="http://localhost:8000/dashboard">User Dashboard</a>
                        <div class="dropdown-content">
                            <a href="http://localhost:8000/dashboard/sessions"><i class="fas fa-book"></i> Full Study Log</a>
                            <a href="http://localhost:8000/dashboard/display"><i class="fas fa-list"></i> Catalog of Sessions</a>
                            <a href="http://localhost:8000/dashboard/statistics"><i class="fas fa-chart-bar"></i> Statistics</a>
                        </div>
                    </li>
                </ul>
            </nav>
        </div>
    </header>

    <!-- Main Content -->
    <main class="content">
        <h1>Study Statistics</h1>

        <!-- Filter Bar -->
        <div class="filter-container">
            <div class="filter-group">
                <label for="timeRange">Time Range:</label>
                <select id="timeRange" onchange="updateCharts()">
                    <option value="all">All Time</option>
                    <option value="month">Last Month</option>
                    <option value="week">Last Week</option>
                </select>
            </div>
            
            <button class="reset-btn" onclick="resetFilters()">Reset Filters</button>
        </div>

        <!-- Summary Stats -->
        <div class="stats-grid">
            <div class="stat-card">
                <h3>Total Study Hours</h3>
                <div class="stat-value" id="totalHours">0</div>
                <div class="stat-label">All Subjects</div>
            </div>
            
            <div class="stat-card">
                <h3>Average Daily Hours</h3>
                <div class="stat-value" id="avgDailyHours">0</div>
                <div class="stat-label">Last 30 Days</div>
            </div>
            
            <div class="stat-card">
                <h3>Most Studied Subject</h3>
                <div class="stat-value" id="topSubject">-</div>
                <div class="stat-label">By Hours</div>
            </div>
        </div>

        <!-- Hours by Subject -->
        <div class="stats-section">
            <h2>Hours by Subject</h2>
            <div class="chart-container">
                <canvas id="subjectHoursChart"></canvas>
            </div>
        </div>

        <!-- Study Trend Over Time -->
        <div class="stats-section">
            <h2>Study Trend Over Time</h2>
            <div class="chart-container">
                <canvas id="timeTrendChart"></canvas>
            </div>
        </div>

        <!-- Daily Breakdown -->
        <div class="stats-section">
            <h2>Daily Study Patterns</h2>
            <div class="chart-container">
                <canvas id="dailyPatternChart"></canvas>
            </div>
        </div>
    </main>

    <script>
        // Process session data from EJS template
        const sessions = [
            <% sessions.forEach(session => { %>
                {
                    subject: '<%= session.session_subject %>',
                    duration: parseDuration('<%= session.session_duration %>'),
                    day: <%= session.session_day %>,
                    month: <%= session.session_month %>,
                    year: <%= session.session_year %>,
                    startTime: '<%= session.session_starttime %>',
                    date: new Date(<%= session.session_year %>, <%= session.session_month %> - 1, <%= session.session_day %>)
                },
            <% }); %>
        ];

        // Helper function to parse duration string into hours
        function parseDuration(durationStr) {
            let hours = 0;
            const hoursMatch = durationStr.match(/(\d+)\s*hours?/);
            if (hoursMatch) hours = parseFloat(hoursMatch[1]);
            
            let minutes = 0;
            const minutesMatch = durationStr.match(/(\d+)\s*minutes?/);
            if (minutesMatch) minutes = parseFloat(minutesMatch[1]);
            
            return hours + (minutes / 60);
        }

        // Initialize charts when page loads
        document.addEventListener('DOMContentLoaded', function() {
            // Calculate summary stats
            calculateSummaryStats();
            
            // Initialize charts
            initSubjectHoursChart();
            initTimeTrendChart();
            initDailyPatternChart();
            
            // Highlight current page in menu
            const currentPage = window.location.pathname;
            const menuLinks = document.querySelectorAll('.nav-menu a');
            
            menuLinks.forEach(link => {
                if (link.getAttribute('href') === currentPage) {
                    link.style.color = 'var(--accent)';
                    link.style.fontWeight = 'bold';
                }
            });
        });

        // Calculate summary statistics
        function calculateSummaryStats() {
            // Total hours
            const totalHours = sessions.reduce((sum, session) => sum + session.duration, 0);
            document.getElementById('totalHours').textContent = totalHours.toFixed(1);
            
            // Average daily hours (last 30 days)
            const thirtyDaysAgo = new Date();
            thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);
            
            const recentSessions = sessions.filter(session => session.date >= thirtyDaysAgo);
            const recentHours = recentSessions.reduce((sum, session) => sum + session.duration, 0);
            const avgDaily = recentHours / 30;
            document.getElementById('avgDailyHours').textContent = avgDaily.toFixed(1);
            
            // Most studied subject
            const subjectHours = {};
            sessions.forEach(session => {
                subjectHours[session.subject] = (subjectHours[session.subject] || 0) + session.duration;
            });
            
            let topSubject = '';
            let maxHours = 0;
            for (const subject in subjectHours) {
                if (subjectHours[subject] > maxHours) {
                    maxHours = subjectHours[subject];
                    topSubject = subject;
                }
            }
            
            document.getElementById('topSubject').textContent = topSubject || '-';
        }

        // Initialize Subject Hours Chart (Pie/Doughnut)
        let subjectHoursChart;
        function initSubjectHoursChart() {
            const ctx = document.getElementById('subjectHoursChart').getContext('2d');
            
            // Calculate hours by subject
            const subjectHours = {};
            sessions.forEach(session => {
                subjectHours[session.subject] = (subjectHours[session.subject] || 0) + session.duration;
            });
            
            const subjects = Object.keys(subjectHours);
            const hours = Object.values(subjectHours);
            
            // Assign colors based on subject
            const backgroundColors = subjects.map(subject => {
                if (subject.includes('Maths')) return 'rgba(231, 76, 60, 0.7)';
                if (subject.includes('English')) return 'rgba(52, 152, 219, 0.7)';
                if (subject.includes('Physics')) return 'rgba(155, 89, 182, 0.7)';
                if (subject.includes('Software')) return 'rgba(46, 204, 113, 0.7)';
                return 'rgba(149, 165, 166, 0.7)';
            });
            
            subjectHoursChart = new Chart(ctx, {
                type: 'doughnut',
                data: {
                    labels: subjects,
                    datasets: [{
                        data: hours,
                        backgroundColor: backgroundColors,
                        borderWidth: 1
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            position: 'right',
                        },
                        tooltip: {
                            callbacks: {
                                label: function(context) {
                                    return `${context.label}: ${context.raw.toFixed(1)} hours`;
                                }
                            }
                        }
                    }
                }
            });
        }

        // Initialize Time Trend Chart (Line)
        let timeTrendChart;
        function initTimeTrendChart() {
            const ctx = document.getElementById('timeTrendChart').getContext('2d');
            
            // Group by date
            const dateMap = {};
            sessions.forEach(session => {
                const dateStr = session.date.toISOString().split('T')[0];
                dateMap[dateStr] = (dateMap[dateStr] || 0) + session.duration;
            });
            
            // Sort dates
            const sortedDates = Object.keys(dateMap).sort();
            const sortedHours = sortedDates.map(date => dateMap[date]);
            
            timeTrendChart = new Chart(ctx, {
                type: 'line',
                data: {
                    labels: sortedDates,
                    datasets: [{
                        label: 'Study Hours',
                        data: sortedHours,
                        backgroundColor: 'rgba(22, 160, 133, 0.2)',
                        borderColor: 'rgba(22, 160, 133, 1)',
                        borderWidth: 2,
                        tension: 0.1,
                        fill: true
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: {
                        y: {
                            beginAtZero: true,
                            title: {
                                display: true,
                                text: 'Hours'
                            }
                        },
                        x: {
                            title: {
                                display: true,
                                text: 'Date'
                            }
                        }
                    }
                }
            });
        }

        // Initialize Daily Pattern Chart (Bar)
        let dailyPatternChart;
        function initDailyPatternChart() {
            const ctx = document.getElementById('dailyPatternChart').getContext('2d');
            
            // Group by day of week (0-6, Sunday-Saturday)
            const dayHours = [0, 0, 0, 0, 0, 0, 0];
            const dayCount = [0, 0, 0, 0, 0, 0, 0];
            
            sessions.forEach(session => {
                const dayOfWeek = session.date.getDay(); // 0-6
                dayHours[dayOfWeek] += session.duration;
                dayCount[dayOfWeek]++;
            });
            
            // Calculate average hours per day
            const avgHours = dayHours.map((hours, i) => dayCount[i] > 0 ? hours / dayCount[i] : 0);
            
            dailyPatternChart = new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],
                    datasets: [{
                        label: 'Average Study Hours',
                        data: avgHours,
                        backgroundColor: 'rgba(52, 152, 219, 0.7)',
                        borderColor: 'rgba(52, 152, 219, 1)',
                        borderWidth: 1
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: {
                        y: {
                            beginAtZero: true,
                            title: {
                                display: true,
                                text: 'Hours'
                            }
                        }
                    }
                }
            });
        }

        // Update charts when filters change
        function updateCharts() {
            // In a real implementation, you would filter the data and update charts
            // For now, we'll just show a simple alert
            alert('Filter functionality would update charts here');
        }

        // Reset filters
        function resetFilters() {
            document.getElementById('timeRange').value = 'all';
            updateCharts();
        }
    </script>
</body>

</html>